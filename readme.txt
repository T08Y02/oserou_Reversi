#NAME : Oserou
試合結果から学習するcpuとオセロをプレイすることができるプログラムです。

#DEMO :  
準備中

#Features : 
・オセロはGUIに対応しており、直感的な操作で手軽にオセロが楽しめます。
・学習段階で勝った盤面を記憶して、それを利用して盤面を評価する方法で学習します(詳細はnote_for_development.txt を参照)。
・作者のローカル環境での学習データを初期値として添付してあるので、すぐに遊べます。
　また、oserou_forlearn.pyを実行するだけで学習を行うことができます。
　学習データの初期化もdata_reset.pyを実行するだけで行うことができます。
・cpuの手の選択は、(1)正規分布に従ってランダムに得られる評価値、(2)盤上の各位置(角や端は高得点)に対応した評価値、
(3)学習データから導出された評価値、(4)取れる石の数　の四つの値の合計で評価されます。プレイ
する際は(2), (3), (4)を利用することを推奨します(デフォルト設定)。
・スパゲティコードです。

#Requirement : 
・python3　での実行を想定しています。
・使用したライブラリ :
    tkinter , csv, os, time, random, math

#File Description : 
  ファイル構造：
  oserou >> data_learn 
            >>　line_{}.csv  ({}には1~38の整数値)

         >> oserou_log_learn
            >>  oserou_log_learn_incdec{}.csv  ({}には整数値、デフォルトでは1~8)
        
         >> data_reset.py

         >> oserou_vscpu.py

         >> oserou_forlearn.py
　 各ファイルの説明：
    data_learn : オセロの盤面についての学習データを行・列別にデータ処理して格納するフォルダ
        line_{}.csv : 行・列別の学習データ(csvファイル)。過去に学習した全てのデータを処理・格納している。

    oserou_log_learn : オセロの盤面についての学習データを学習に用いた試合ごとに格納するフォルダ
        oserou_log_learn_incdec{}.csv : 試合別の学習データ(csvファイル)。学習の際に更新される。
    data_reset.py : 実行することで学習内容を初期化できます。具体的には、data_learn内のファイルを初期化します。
    oserou_vscpu.py : 実行することでcpuとオセロをプレイできます。引数は int a です。
                    　ファイル実行後に　"time control:"という文が出力されるので、プレイヤーの
                    　一手あたりの待ち時間として設定したい値を、キーボード等を用いて整数値半角で入力してください。
                      <実行コード例> python3 oserou_vscpu.py   (ここまで一旦入力して実行)
                      　　　　　　　　time control: 5　　　　　　 (数字部分のみ入力して実行)
    oserou_forlearn.py : 実行することでcpuにオセロを学習させます。引数は int suuji　です。
                         ファイル実行後に　"save file number:"という文が出力されるので、学習したデータを格納する
                        　ファイル　oserou_log_learn_incdec{}.csv のファイル名の{}部分に設定したい数値を、
                        　キーボード等を用いて整数値半角で入力してください。
                    　<実行コード例>　python3 oserou_vscpu.py   (ここまで一旦入力して実行)
                      　　　　　　　　save file number: 5　　　　　　 (数字部分のみ入力して実行)

#Usage : 
    (cpuと対戦する場合)
    1. oserou_vscpu.py を実行します。
    2. ターミナル等に文字列 "time control: "と出力されるので、プレイヤーの
        一手あたりの待ち時間として設定したい値を、キーボード等を用いて整数値半角で入力してください。
        初めてプレイする場合は20秒程度に設定しておくことを推奨しますが、慣れてきたら5秒程度を推奨します。
    3. tkinterのウィンドウが出現し、オセロの盤面が表示されたら成功です。赤色の石がプレイヤーが
    　　操作する石です。赤色の石がオセロ盤の外側左上に表示されることを確認してください。
    4. 2を実行した時点でゲームが開始します。基本的にはオセロのルールに従います。プレイヤーが先手番、黒石となり、
        プレイヤーとcpuが交互に手番をプレイします。手番は盤外に赤石が表示されているか否かで確認でき、
        赤石が表示されている場合はプレイヤーの手番なので速やかに入力(クリック)を行う必要があります。プレイヤーは、
        自分の手番においてオセロのルールに従って石を取れるマス(以下有効な位置と呼称します)を自分が設定した
        秒数以内にクリックする必要があります。赤石がプレイヤーがクリックした位置に移動しますので、赤石が所望のマスに
        表示されていることを確認してください。プレイヤーが入力で指定した制限時間が経過した時点で入力を打ち切り、
        時間内に最後にクリックされたマスがプレイヤーの手として認識されます。手が有効な位置ではない
        (白石をひとつも取れない位置、あるいは盤外など)場合、プレイヤーはパスしたとみなし、cpuの手番に移行しますので
        注意してください。プレイヤーの手番終了後3秒程度経過すると自動的にcpuの手が入力され、盤面が変化し再び赤石が
        表示されますので、次のターンの手の入力を行ってください。以下これを繰り返し、ゲームを進行します。
        cpuは盤上に有効な位置が存在しないときにのみパスを行います。各手番において、入力された手のマスが"行, 列"の順で
        ターミナルに出力される、あるいはプレイヤーがパスを行った場合"platerpass"、cpuがパスを行った場合"cpupass"
        と表示されますので、入力された手やパスの確認に利用してください。
    5. 4を繰り返してゲームを進行し、先手(プレイヤー)と後手(cpu)が連続してパスを行った(有効な位置に石が置けない場合を想定)
        時点でゲーム終了とみなします。その時点での黒石の数がプレイヤーの点数、白石の数がcpuの点数となり、プレイヤーの点数が
        cpuの点数を上回った場合は"Winner:player"、下回った場合は"Winner:cpu"、同点だった場合は"Draw"と出力されます。
        その後、scoreとしてプレイヤーの点数からcpuの点数を引いた値が文字列"score:"に続いて出力され、ウィンドウが自動的に閉じ、
        ゲームが終了します。
    6. ゲーム中にウィンドウをユーザ側で強制的に閉じた場合、エラーが発生してプログラムが終了しますので注意してください。
    
    (cpuに学習させる場合)
    <重要> 手順3において、全ての試合が終わるまでウィンドウを閉じないでください。
        　全ての試合が終わった時点でウィンドウは自動的に閉じます。
    <重要> data_learnフォルダ内のファイルを直接削除しないでください。
          学習内容を初期化したい(全て破棄したい)場合は必ず data_reset.pyを実行して初期化を行ってください。
    　　　　
    0. 必要に応じて、data_reset.py を実行して data_learnフォルダ内の学習データを初期化します。
    　　学習データを初期化すると過去に学習した内容は全て破棄されます。
    1. oserou_forlearn.py を実行します。
    2. ターミナル等に文字列 "time control: "と出力されるので、学習したデータを格納するファイル　
    　　oserou_log_learn_incdec{}.csv のファイル名の{}部分に設定したい数値を、キーボード等を用いて
    　　整数値半角で入力してください。すでにoserou_log_learnフォルダ内に存在するファイル名を指定した場合、
    　　すでに保存されている文字列に追記を行いますので注意してください。データサイズが大きいなどの理由で
    　　oserou_log_learnフォルダ内のデータを初期化したい場合は、該当する試合結果の含まれるファイルを直接削除してください。
    　　再度oserou_forlearn.pyを実行して該当する番号を入力として渡すと新規にファイルを作成します。この操作では学習内容は
    　　失われません(学習内容はdata_learnフォルダ内のファイルに格納されているため)。
    3. 2の入力を受け取ったのち、cpu同士の対戦が10試合自動で行われます。試合の様子はそれぞれ別のウィンドウに表示され、
    　　コマンドラインには試合結果のみが出力されます。10試合終了した時点で、行われた試合のデータは適切な形でoserou_log_learnフォルダと
    　　data_learnフォルダ内に格納され、自動でプログラムが終了します。通常は数秒から数十秒を要しますが、data_learnフォルダ内の
    　　学習データの量が多い場合には実行に時間がかかる場合があります。data_reset.pyを用いて過去の学習データを初期化することで
    　　改善する場合があります。

#Changelog
2022.08 初期バージョン

    
